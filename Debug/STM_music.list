
STM_music.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003288  08003288  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003288  08003288  00013288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003290  08003290  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003290  08003290  00013290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003294  08003294  00013294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000000c  080032a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080032a4  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c033  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d82  00000000  00000000  0002c06f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000888  00000000  00000000  0002ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a0  00000000  00000000  0002e680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000163c7  00000000  00000000  0002ee20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a94  00000000  00000000  000451e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bf72  00000000  00000000  0004dc7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9bed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021fc  00000000  00000000  000d9c68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003260 	.word	0x08003260

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003260 	.word	0x08003260

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	4b61      	ldr	r3, [pc, #388]	; (8000678 <MX_GPIO_Init+0x1a0>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a60      	ldr	r2, [pc, #384]	; (8000678 <MX_GPIO_Init+0x1a0>)
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b5e      	ldr	r3, [pc, #376]	; (8000678 <MX_GPIO_Init+0x1a0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0310 	and.w	r3, r3, #16
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	4b5a      	ldr	r3, [pc, #360]	; (8000678 <MX_GPIO_Init+0x1a0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a59      	ldr	r2, [pc, #356]	; (8000678 <MX_GPIO_Init+0x1a0>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b57      	ldr	r3, [pc, #348]	; (8000678 <MX_GPIO_Init+0x1a0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4b53      	ldr	r3, [pc, #332]	; (8000678 <MX_GPIO_Init+0x1a0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a52      	ldr	r2, [pc, #328]	; (8000678 <MX_GPIO_Init+0x1a0>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b50      	ldr	r3, [pc, #320]	; (8000678 <MX_GPIO_Init+0x1a0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4b4c      	ldr	r3, [pc, #304]	; (8000678 <MX_GPIO_Init+0x1a0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a4b      	ldr	r2, [pc, #300]	; (8000678 <MX_GPIO_Init+0x1a0>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b49      	ldr	r3, [pc, #292]	; (8000678 <MX_GPIO_Init+0x1a0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4b45      	ldr	r3, [pc, #276]	; (8000678 <MX_GPIO_Init+0x1a0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a44      	ldr	r2, [pc, #272]	; (8000678 <MX_GPIO_Init+0x1a0>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b42      	ldr	r3, [pc, #264]	; (8000678 <MX_GPIO_Init+0x1a0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b3e      	ldr	r3, [pc, #248]	; (8000678 <MX_GPIO_Init+0x1a0>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a3d      	ldr	r2, [pc, #244]	; (8000678 <MX_GPIO_Init+0x1a0>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b3b      	ldr	r3, [pc, #236]	; (8000678 <MX_GPIO_Init+0x1a0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	4838      	ldr	r0, [pc, #224]	; (800067c <MX_GPIO_Init+0x1a4>)
 800059c:	f000 fc8a 	bl	8000eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2101      	movs	r1, #1
 80005a4:	4836      	ldr	r0, [pc, #216]	; (8000680 <MX_GPIO_Init+0x1a8>)
 80005a6:	f000 fc85 	bl	8000eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005aa:	2200      	movs	r2, #0
 80005ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005b0:	4834      	ldr	r0, [pc, #208]	; (8000684 <MX_GPIO_Init+0x1ac>)
 80005b2:	f000 fc7f 	bl	8000eb4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005b6:	2304      	movs	r3, #4
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	482c      	ldr	r0, [pc, #176]	; (800067c <MX_GPIO_Init+0x1a4>)
 80005ca:	f000 faf1 	bl	8000bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005ce:	2308      	movs	r3, #8
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	4619      	mov	r1, r3
 80005e4:	4825      	ldr	r0, [pc, #148]	; (800067c <MX_GPIO_Init+0x1a4>)
 80005e6:	f000 fae3 	bl	8000bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80005ea:	2332      	movs	r3, #50	; 0x32
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4619      	mov	r1, r3
 80005fe:	481f      	ldr	r0, [pc, #124]	; (800067c <MX_GPIO_Init+0x1a4>)
 8000600:	f000 fad6 	bl	8000bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000604:	2301      	movs	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	4819      	ldr	r0, [pc, #100]	; (8000680 <MX_GPIO_Init+0x1a8>)
 800061c:	f000 fac8 	bl	8000bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000620:	2301      	movs	r3, #1
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000624:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	4619      	mov	r1, r3
 8000634:	4814      	ldr	r0, [pc, #80]	; (8000688 <MX_GPIO_Init+0x1b0>)
 8000636:	f000 fabb 	bl	8000bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800063a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800063e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4619      	mov	r1, r3
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <MX_GPIO_Init+0x1ac>)
 8000654:	f000 faac 	bl	8000bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000658:	2320      	movs	r3, #32
 800065a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_GPIO_Init+0x1ac>)
 800066c:	f000 faa0 	bl	8000bb0 <HAL_GPIO_Init>

}
 8000670:	bf00      	nop
 8000672:	3730      	adds	r7, #48	; 0x30
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40021000 	.word	0x40021000
 8000680:	40020800 	.word	0x40020800
 8000684:	40020c00 	.word	0x40020c00
 8000688:	40020000 	.word	0x40020000

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 f914 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f80e 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f7ff ff1e 	bl	80004d8 <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800069c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <main+0x24>)
 80006a2:	f000 fc20 	bl	8000ee6 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 80006a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006aa:	f000 f979 	bl	80009a0 <HAL_Delay>
    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80006ae:	e7f5      	b.n	800069c <main+0x10>
 80006b0:	40020c00 	.word	0x40020c00

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fdc4 	bl	8003250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b27      	ldr	r3, [pc, #156]	; (800077c <SystemClock_Config+0xc8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a26      	ldr	r2, [pc, #152]	; (800077c <SystemClock_Config+0xc8>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <SystemClock_Config+0xc8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <SystemClock_Config+0xcc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a20      	ldr	r2, [pc, #128]	; (8000780 <SystemClock_Config+0xcc>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <SystemClock_Config+0xcc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000714:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000728:	23c0      	movs	r3, #192	; 0xc0
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072c:	2304      	movs	r3, #4
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fd1d 	bl	8002178 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000744:	f000 f81e 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2103      	movs	r1, #3
 8000764:	4618      	mov	r0, r3
 8000766:	f001 ff7f 	bl	8002668 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000770:	f000 f808 	bl	8000784 <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3750      	adds	r7, #80	; 0x50
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078a:	e7fe      	b.n	800078a <Error_Handler+0x6>

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <HAL_MspInit+0x4c>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	; 0x44
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ca:	2007      	movs	r0, #7
 80007cc:	f000 f9bc 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler+0x4>

080007ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 f89a 	bl	8000960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <OTG_FS_IRQHandler+0x10>)
 8000836:	f000 fb70 	bl	8000f1a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000002c 	.word	0x2000002c

08000844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <SystemInit+0x20>)
 800084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <SystemInit+0x20>)
 8000850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800086e:	490e      	ldr	r1, [pc, #56]	; (80008a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000884:	4c0b      	ldr	r4, [pc, #44]	; (80008b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000892:	f7ff ffd7 	bl	8000844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000896:	f002 fcb7 	bl	8003208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089a:	f7ff fef7 	bl	800068c <main>
  bx  lr    
 800089e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008ac:	08003298 	.word	0x08003298
  ldr r2, =_sbss
 80008b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008b4:	20000330 	.word	0x20000330

080008b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC_IRQHandler>
	...

080008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_Init+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <HAL_Init+0x40>)
 80008c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_Init+0x40>)
 80008d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_Init+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_Init+0x40>)
 80008de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 f92f 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 f808 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f0:	f7ff ff4c 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023c00 	.word	0x40023c00

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x54>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x58>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000916:	fbb3 f3f1 	udiv	r3, r3, r1
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f939 	bl	8000b96 <HAL_SYSTICK_Config>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e00e      	b.n	800094c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d80a      	bhi.n	800094a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f000 f90f 	bl	8000b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4a06      	ldr	r2, [pc, #24]	; (800095c <HAL_InitTick+0x5c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000000 	.word	0x20000000
 8000958:	20000008 	.word	0x20000008
 800095c:	20000004 	.word	0x20000004

08000960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x20>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_IncTick+0x24>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <HAL_IncTick+0x24>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000008 	.word	0x20000008
 8000984:	20000028 	.word	0x20000028

08000988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <HAL_GetTick+0x14>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000028 	.word	0x20000028

080009a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a8:	f7ff ffee 	bl	8000988 <HAL_GetTick>
 80009ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b8:	d005      	beq.n	80009c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_Delay+0x40>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4413      	add	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009c6:	bf00      	nop
 80009c8:	f7ff ffde 	bl	8000988 <HAL_GetTick>
 80009cc:	4602      	mov	r2, r0
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8f7      	bhi.n	80009c8 <HAL_Delay+0x28>
  {
  }
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000008 	.word	0x20000008

080009e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	60d3      	str	r3, [r2, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <__NVIC_GetPriorityGrouping+0x18>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	f003 0307 	and.w	r3, r3, #7
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b14:	d301      	bcc.n	8000b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00f      	b.n	8000b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <SysTick_Config+0x40>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b22:	210f      	movs	r1, #15
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f7ff ff8e 	bl	8000a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <SysTick_Config+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <SysTick_Config+0x40>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff47 	bl	80009e4 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff5c 	bl	8000a2c <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ff8e 	bl	8000a9c <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5d 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ffb0 	bl	8000b04 <SysTick_Config>
 8000ba4:	4603      	mov	r3, r0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	e159      	b.n	8000e80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bcc:	2201      	movs	r2, #1
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f040 8148 	bne.w	8000e7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0303 	and.w	r3, r3, #3
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d005      	beq.n	8000c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d130      	bne.n	8000c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4013      	ands	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	68da      	ldr	r2, [r3, #12]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	091b      	lsrs	r3, r3, #4
 8000c4e:	f003 0201 	and.w	r2, r3, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d017      	beq.n	8000ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d123      	bne.n	8000cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	08da      	lsrs	r2, r3, #3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3208      	adds	r2, #8
 8000cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	691a      	ldr	r2, [r3, #16]
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	08da      	lsrs	r2, r3, #3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3208      	adds	r2, #8
 8000cee:	69b9      	ldr	r1, [r7, #24]
 8000cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0203 	and.w	r2, r3, #3
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 80a2 	beq.w	8000e7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b56      	ldr	r3, [pc, #344]	; (8000e94 <HAL_GPIO_Init+0x2e4>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a55      	ldr	r2, [pc, #340]	; (8000e94 <HAL_GPIO_Init+0x2e4>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <HAL_GPIO_Init+0x2e4>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d52:	4a51      	ldr	r2, [pc, #324]	; (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	220f      	movs	r2, #15
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a48      	ldr	r2, [pc, #288]	; (8000e9c <HAL_GPIO_Init+0x2ec>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d019      	beq.n	8000db2 <HAL_GPIO_Init+0x202>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a47      	ldr	r2, [pc, #284]	; (8000ea0 <HAL_GPIO_Init+0x2f0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d013      	beq.n	8000dae <HAL_GPIO_Init+0x1fe>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a46      	ldr	r2, [pc, #280]	; (8000ea4 <HAL_GPIO_Init+0x2f4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d00d      	beq.n	8000daa <HAL_GPIO_Init+0x1fa>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a45      	ldr	r2, [pc, #276]	; (8000ea8 <HAL_GPIO_Init+0x2f8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d007      	beq.n	8000da6 <HAL_GPIO_Init+0x1f6>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a44      	ldr	r2, [pc, #272]	; (8000eac <HAL_GPIO_Init+0x2fc>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d101      	bne.n	8000da2 <HAL_GPIO_Init+0x1f2>
 8000d9e:	2304      	movs	r3, #4
 8000da0:	e008      	b.n	8000db4 <HAL_GPIO_Init+0x204>
 8000da2:	2307      	movs	r3, #7
 8000da4:	e006      	b.n	8000db4 <HAL_GPIO_Init+0x204>
 8000da6:	2303      	movs	r3, #3
 8000da8:	e004      	b.n	8000db4 <HAL_GPIO_Init+0x204>
 8000daa:	2302      	movs	r3, #2
 8000dac:	e002      	b.n	8000db4 <HAL_GPIO_Init+0x204>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <HAL_GPIO_Init+0x204>
 8000db2:	2300      	movs	r3, #0
 8000db4:	69fa      	ldr	r2, [r7, #28]
 8000db6:	f002 0203 	and.w	r2, r2, #3
 8000dba:	0092      	lsls	r2, r2, #2
 8000dbc:	4093      	lsls	r3, r2
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc4:	4934      	ldr	r1, [pc, #208]	; (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dd2:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <HAL_GPIO_Init+0x300>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000df6:	4a2e      	ldr	r2, [pc, #184]	; (8000eb0 <HAL_GPIO_Init+0x300>)
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <HAL_GPIO_Init+0x300>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e20:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <HAL_GPIO_Init+0x300>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <HAL_GPIO_Init+0x300>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e4a:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <HAL_GPIO_Init+0x300>)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_GPIO_Init+0x300>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e74:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <HAL_GPIO_Init+0x300>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	61fb      	str	r3, [r7, #28]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	f67f aea2 	bls.w	8000bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3724      	adds	r7, #36	; 0x24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	40020c00 	.word	0x40020c00
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40013c00 	.word	0x40013c00

08000eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec4:	787b      	ldrb	r3, [r7, #1]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ed0:	e003      	b.n	8000eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ed2:	887b      	ldrh	r3, [r7, #2]
 8000ed4:	041a      	lsls	r2, r3, #16
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	619a      	str	r2, [r3, #24]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b085      	sub	sp, #20
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ef8:	887a      	ldrh	r2, [r7, #2]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4013      	ands	r3, r2
 8000efe:	041a      	lsls	r2, r3, #16
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	400b      	ands	r3, r1
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	619a      	str	r2, [r3, #24]
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 fe48 	bl	8002bc6 <USB_GetMode>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	f040 80f6 	bne.w	800112a <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 fe2c 	bl	8002ba0 <USB_ReadInterrupts>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 80ec 	beq.w	8001128 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fe23 	bl	8002ba0 <USB_ReadInterrupts>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000f64:	d104      	bne.n	8000f70 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f6e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 fe13 	bl	8002ba0 <USB_ReadInterrupts>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000f84:	d104      	bne.n	8000f90 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f8e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fe03 	bl	8002ba0 <USB_ReadInterrupts>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000fa4:	d104      	bne.n	8000fb0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fae:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fdf3 	bl	8002ba0 <USB_ReadInterrupts>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d103      	bne.n	8000fcc <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fde5 	bl	8002ba0 <USB_ReadInterrupts>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fe0:	d11c      	bne.n	800101c <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000fea:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10f      	bne.n	800101c <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	6938      	ldr	r0, [r7, #16]
 8001000:	f001 fd12 	bl	8002a28 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001004:	6938      	ldr	r0, [r7, #16]
 8001006:	f001 fd43 	bl	8002a90 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2101      	movs	r1, #1
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fde6 	bl	8002be2 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f002 f877 	bl	800310a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fdbd 	bl	8002ba0 <USB_ReadInterrupts>
 8001026:	4603      	mov	r3, r0
 8001028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800102c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001030:	d102      	bne.n	8001038 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f001 f82c 	bl	8002090 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fdaf 	bl	8002ba0 <USB_ReadInterrupts>
 8001042:	4603      	mov	r3, r0
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	2b08      	cmp	r3, #8
 800104a:	d106      	bne.n	800105a <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f002 f840 	bl	80030d2 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2208      	movs	r2, #8
 8001058:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fd9e 	bl	8002ba0 <USB_ReadInterrupts>
 8001064:	4603      	mov	r3, r0
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	2b10      	cmp	r3, #16
 800106c:	d101      	bne.n	8001072 <HAL_HCD_IRQHandler+0x158>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_HCD_IRQHandler+0x15a>
 8001072:	2300      	movs	r3, #0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d012      	beq.n	800109e <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	699a      	ldr	r2, [r3, #24]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0210 	bic.w	r2, r2, #16
 8001086:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 ff30 	bl	8001eee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	699a      	ldr	r2, [r3, #24]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0210 	orr.w	r2, r2, #16
 800109c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fd7c 	bl	8002ba0 <USB_ReadInterrupts>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80010b2:	d13a      	bne.n	800112a <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fdcc 	bl	8002c56 <USB_HC_ReadInterrupt>
 80010be:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e025      	b.n	8001112 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	fa22 f303 	lsr.w	r3, r2, r3
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d018      	beq.n	800110c <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	015a      	lsls	r2, r3, #5
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4413      	add	r3, r2
 80010e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010f0:	d106      	bne.n	8001100 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f836 	bl	800116a <HCD_HC_IN_IRQHandler>
 80010fe:	e005      	b.n	800110c <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 fb86 	bl	8001818 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	429a      	cmp	r2, r3
 800111a:	d3d4      	bcc.n	80010c6 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001124:	615a      	str	r2, [r3, #20]
 8001126:	e000      	b.n	800112a <HAL_HCD_IRQHandler+0x210>
      return;
 8001128:	bf00      	nop
    }
  }
}
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <HAL_HCD_Stop+0x16>
 8001142:	2302      	movs	r3, #2
 8001144:	e00d      	b.n	8001162 <HAL_HCD_Stop+0x32>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fe8c 	bl	8002e70 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	015a      	lsls	r2, r3, #5
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4413      	add	r3, r2
 800118c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	2b04      	cmp	r3, #4
 8001198:	d11a      	bne.n	80011d0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	015a      	lsls	r2, r3, #5
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4413      	add	r3, r2
 80011a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011a6:	461a      	mov	r2, r3
 80011a8:	2304      	movs	r3, #4
 80011aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	212c      	movs	r1, #44	; 0x2c
 80011b2:	fb01 f303 	mul.w	r3, r1, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	3361      	adds	r3, #97	; 0x61
 80011ba:	2206      	movs	r2, #6
 80011bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fd55 	bl	8002c78 <USB_HC_Halt>
 80011ce:	e0af      	b.n	8001330 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	015a      	lsls	r2, r3, #5
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4413      	add	r3, r2
 80011d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011e6:	d11b      	bne.n	8001220 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	015a      	lsls	r2, r3, #5
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4413      	add	r3, r2
 80011f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011f4:	461a      	mov	r2, r3
 80011f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	212c      	movs	r1, #44	; 0x2c
 8001202:	fb01 f303 	mul.w	r3, r1, r3
 8001206:	4413      	add	r3, r2
 8001208:	3361      	adds	r3, #97	; 0x61
 800120a:	2207      	movs	r2, #7
 800120c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fd2d 	bl	8002c78 <USB_HC_Halt>
 800121e:	e087      	b.n	8001330 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	015a      	lsls	r2, r3, #5
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4413      	add	r3, r2
 8001228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 0320 	and.w	r3, r3, #32
 8001232:	2b20      	cmp	r3, #32
 8001234:	d109      	bne.n	800124a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	015a      	lsls	r2, r3, #5
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4413      	add	r3, r2
 800123e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001242:	461a      	mov	r2, r3
 8001244:	2320      	movs	r3, #32
 8001246:	6093      	str	r3, [r2, #8]
 8001248:	e072      	b.n	8001330 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	015a      	lsls	r2, r3, #5
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4413      	add	r3, r2
 8001252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b08      	cmp	r3, #8
 800125e:	d11a      	bne.n	8001296 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	015a      	lsls	r2, r3, #5
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4413      	add	r3, r2
 8001268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800126c:	461a      	mov	r2, r3
 800126e:	2308      	movs	r3, #8
 8001270:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	212c      	movs	r1, #44	; 0x2c
 8001278:	fb01 f303 	mul.w	r3, r1, r3
 800127c:	4413      	add	r3, r2
 800127e:	3361      	adds	r3, #97	; 0x61
 8001280:	2205      	movs	r2, #5
 8001282:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f001 fcf2 	bl	8002c78 <USB_HC_Halt>
 8001294:	e04c      	b.n	8001330 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	015a      	lsls	r2, r3, #5
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4413      	add	r3, r2
 800129e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ac:	d11b      	bne.n	80012e6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	015a      	lsls	r2, r3, #5
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4413      	add	r3, r2
 80012b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012ba:	461a      	mov	r2, r3
 80012bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	212c      	movs	r1, #44	; 0x2c
 80012c8:	fb01 f303 	mul.w	r3, r1, r3
 80012cc:	4413      	add	r3, r2
 80012ce:	3361      	adds	r3, #97	; 0x61
 80012d0:	2208      	movs	r2, #8
 80012d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fcca 	bl	8002c78 <USB_HC_Halt>
 80012e4:	e024      	b.n	8001330 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	015a      	lsls	r2, r3, #5
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4413      	add	r3, r2
 80012ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f8:	2b80      	cmp	r3, #128	; 0x80
 80012fa:	d119      	bne.n	8001330 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	015a      	lsls	r2, r3, #5
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4413      	add	r3, r2
 8001304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001308:	461a      	mov	r2, r3
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	212c      	movs	r1, #44	; 0x2c
 8001314:	fb01 f303 	mul.w	r3, r1, r3
 8001318:	4413      	add	r3, r2
 800131a:	3361      	adds	r3, #97	; 0x61
 800131c:	2206      	movs	r2, #6
 800131e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f001 fca4 	bl	8002c78 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	015a      	lsls	r2, r3, #5
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4413      	add	r3, r2
 8001338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001346:	d112      	bne.n	800136e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f001 fc90 	bl	8002c78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	015a      	lsls	r2, r3, #5
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4413      	add	r3, r2
 8001360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001364:	461a      	mov	r2, r3
 8001366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800136c:	e250      	b.n	8001810 <HCD_HC_IN_IRQHandler+0x6a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	015a      	lsls	r2, r3, #5
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4413      	add	r3, r2
 8001376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b01      	cmp	r3, #1
 8001382:	f040 80e0 	bne.w	8001546 <HCD_HC_IN_IRQHandler+0x3dc>
    if (hhcd->Init.dma_enable != 0U)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d019      	beq.n	80013c2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	212c      	movs	r1, #44	; 0x2c
 8001394:	fb01 f303 	mul.w	r3, r1, r3
 8001398:	4413      	add	r3, r2
 800139a:	3348      	adds	r3, #72	; 0x48
 800139c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	0159      	lsls	r1, r3, #5
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	440b      	add	r3, r1
 80013a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80013b0:	1ad2      	subs	r2, r2, r3
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	202c      	movs	r0, #44	; 0x2c
 80013b8:	fb00 f303 	mul.w	r3, r0, r3
 80013bc:	440b      	add	r3, r1
 80013be:	3350      	adds	r3, #80	; 0x50
 80013c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	212c      	movs	r1, #44	; 0x2c
 80013c8:	fb01 f303 	mul.w	r3, r1, r3
 80013cc:	4413      	add	r3, r2
 80013ce:	3361      	adds	r3, #97	; 0x61
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	212c      	movs	r1, #44	; 0x2c
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	4413      	add	r3, r2
 80013e0:	335c      	adds	r3, #92	; 0x5c
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013f2:	461a      	mov	r2, r3
 80013f4:	2301      	movs	r3, #1
 80013f6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	212c      	movs	r1, #44	; 0x2c
 80013fe:	fb01 f303 	mul.w	r3, r1, r3
 8001402:	4413      	add	r3, r2
 8001404:	333f      	adds	r3, #63	; 0x3f
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d009      	beq.n	8001420 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	212c      	movs	r1, #44	; 0x2c
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	4413      	add	r3, r2
 8001418:	333f      	adds	r3, #63	; 0x3f
 800141a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800141c:	2b02      	cmp	r3, #2
 800141e:	d111      	bne.n	8001444 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fc24 	bl	8002c78 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	015a      	lsls	r2, r3, #5
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4413      	add	r3, r2
 8001438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800143c:	461a      	mov	r2, r3
 800143e:	2310      	movs	r3, #16
 8001440:	6093      	str	r3, [r2, #8]
 8001442:	e03b      	b.n	80014bc <HCD_HC_IN_IRQHandler+0x352>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	212c      	movs	r1, #44	; 0x2c
 800144a:	fb01 f303 	mul.w	r3, r1, r3
 800144e:	4413      	add	r3, r2
 8001450:	333f      	adds	r3, #63	; 0x3f
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d009      	beq.n	800146c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	212c      	movs	r1, #44	; 0x2c
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	4413      	add	r3, r2
 8001464:	333f      	adds	r3, #63	; 0x3f
 8001466:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001468:	2b01      	cmp	r3, #1
 800146a:	d127      	bne.n	80014bc <HCD_HC_IN_IRQHandler+0x352>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4413      	add	r3, r2
 8001474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	0151      	lsls	r1, r2, #5
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	440a      	add	r2, r1
 8001482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001486:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800148a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	212c      	movs	r1, #44	; 0x2c
 8001492:	fb01 f303 	mul.w	r3, r1, r3
 8001496:	4413      	add	r3, r2
 8001498:	3360      	adds	r3, #96	; 0x60
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	b2d8      	uxtb	r0, r3
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	212c      	movs	r1, #44	; 0x2c
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	3360      	adds	r3, #96	; 0x60
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4601      	mov	r1, r0
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f001 fe35 	bl	8003126 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d12b      	bne.n	800151c <HCD_HC_IN_IRQHandler+0x3b2>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	212c      	movs	r1, #44	; 0x2c
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	3348      	adds	r3, #72	; 0x48
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	202c      	movs	r0, #44	; 0x2c
 80014da:	fb00 f202 	mul.w	r2, r0, r2
 80014de:	440a      	add	r2, r1
 80014e0:	3240      	adds	r2, #64	; 0x40
 80014e2:	8812      	ldrh	r2, [r2, #0]
 80014e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 818f 	beq.w	8001810 <HCD_HC_IN_IRQHandler+0x6a6>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	212c      	movs	r1, #44	; 0x2c
 80014f8:	fb01 f303 	mul.w	r3, r1, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	3354      	adds	r3, #84	; 0x54
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	f083 0301 	eor.w	r3, r3, #1
 8001506:	b2d8      	uxtb	r0, r3
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	212c      	movs	r1, #44	; 0x2c
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	4413      	add	r3, r2
 8001514:	3354      	adds	r3, #84	; 0x54
 8001516:	4602      	mov	r2, r0
 8001518:	701a      	strb	r2, [r3, #0]
}
 800151a:	e179      	b.n	8001810 <HCD_HC_IN_IRQHandler+0x6a6>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	212c      	movs	r1, #44	; 0x2c
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	3354      	adds	r3, #84	; 0x54
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	f083 0301 	eor.w	r3, r3, #1
 8001530:	b2d8      	uxtb	r0, r3
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	212c      	movs	r1, #44	; 0x2c
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	4413      	add	r3, r2
 800153e:	3354      	adds	r3, #84	; 0x54
 8001540:	4602      	mov	r2, r0
 8001542:	701a      	strb	r2, [r3, #0]
}
 8001544:	e164      	b.n	8001810 <HCD_HC_IN_IRQHandler+0x6a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	015a      	lsls	r2, r3, #5
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4413      	add	r3, r2
 800154e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b02      	cmp	r3, #2
 800155a:	f040 80f7 	bne.w	800174c <HCD_HC_IN_IRQHandler+0x5e2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	212c      	movs	r1, #44	; 0x2c
 8001564:	fb01 f303 	mul.w	r3, r1, r3
 8001568:	4413      	add	r3, r2
 800156a:	3361      	adds	r3, #97	; 0x61
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d109      	bne.n	8001586 <HCD_HC_IN_IRQHandler+0x41c>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	212c      	movs	r1, #44	; 0x2c
 8001578:	fb01 f303 	mul.w	r3, r1, r3
 800157c:	4413      	add	r3, r2
 800157e:	3360      	adds	r3, #96	; 0x60
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	e0c9      	b.n	800171a <HCD_HC_IN_IRQHandler+0x5b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	212c      	movs	r1, #44	; 0x2c
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	4413      	add	r3, r2
 8001592:	3361      	adds	r3, #97	; 0x61
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d109      	bne.n	80015ae <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	212c      	movs	r1, #44	; 0x2c
 80015a0:	fb01 f303 	mul.w	r3, r1, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	3360      	adds	r3, #96	; 0x60
 80015a8:	2205      	movs	r2, #5
 80015aa:	701a      	strb	r2, [r3, #0]
 80015ac:	e0b5      	b.n	800171a <HCD_HC_IN_IRQHandler+0x5b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	212c      	movs	r1, #44	; 0x2c
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	3361      	adds	r3, #97	; 0x61
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d009      	beq.n	80015d6 <HCD_HC_IN_IRQHandler+0x46c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	212c      	movs	r1, #44	; 0x2c
 80015c8:	fb01 f303 	mul.w	r3, r1, r3
 80015cc:	4413      	add	r3, r2
 80015ce:	3361      	adds	r3, #97	; 0x61
 80015d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d150      	bne.n	8001678 <HCD_HC_IN_IRQHandler+0x50e>
      hhcd->hc[ch_num].ErrCnt++;
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	212c      	movs	r1, #44	; 0x2c
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	335c      	adds	r3, #92	; 0x5c
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	202c      	movs	r0, #44	; 0x2c
 80015ee:	fb00 f303 	mul.w	r3, r0, r3
 80015f2:	440b      	add	r3, r1
 80015f4:	335c      	adds	r3, #92	; 0x5c
 80015f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	212c      	movs	r1, #44	; 0x2c
 80015fe:	fb01 f303 	mul.w	r3, r1, r3
 8001602:	4413      	add	r3, r2
 8001604:	335c      	adds	r3, #92	; 0x5c
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d912      	bls.n	8001632 <HCD_HC_IN_IRQHandler+0x4c8>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	212c      	movs	r1, #44	; 0x2c
 8001612:	fb01 f303 	mul.w	r3, r1, r3
 8001616:	4413      	add	r3, r2
 8001618:	335c      	adds	r3, #92	; 0x5c
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	212c      	movs	r1, #44	; 0x2c
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	4413      	add	r3, r2
 800162a:	3360      	adds	r3, #96	; 0x60
 800162c:	2204      	movs	r2, #4
 800162e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001630:	e073      	b.n	800171a <HCD_HC_IN_IRQHandler+0x5b0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	212c      	movs	r1, #44	; 0x2c
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	4413      	add	r3, r2
 800163e:	3360      	adds	r3, #96	; 0x60
 8001640:	2202      	movs	r2, #2
 8001642:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	015a      	lsls	r2, r3, #5
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4413      	add	r3, r2
 800164c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800165a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001662:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	015a      	lsls	r2, r3, #5
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4413      	add	r3, r2
 800166c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001670:	461a      	mov	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001676:	e050      	b.n	800171a <HCD_HC_IN_IRQHandler+0x5b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	212c      	movs	r1, #44	; 0x2c
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	4413      	add	r3, r2
 8001684:	3361      	adds	r3, #97	; 0x61
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d122      	bne.n	80016d2 <HCD_HC_IN_IRQHandler+0x568>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	212c      	movs	r1, #44	; 0x2c
 8001692:	fb01 f303 	mul.w	r3, r1, r3
 8001696:	4413      	add	r3, r2
 8001698:	3360      	adds	r3, #96	; 0x60
 800169a:	2202      	movs	r2, #2
 800169c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	015a      	lsls	r2, r3, #5
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4413      	add	r3, r2
 80016a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80016b4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016bc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	015a      	lsls	r2, r3, #5
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ca:	461a      	mov	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e023      	b.n	800171a <HCD_HC_IN_IRQHandler+0x5b0>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	212c      	movs	r1, #44	; 0x2c
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	4413      	add	r3, r2
 80016de:	3361      	adds	r3, #97	; 0x61
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b07      	cmp	r3, #7
 80016e4:	d119      	bne.n	800171a <HCD_HC_IN_IRQHandler+0x5b0>
      hhcd->hc[ch_num].ErrCnt++;
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	212c      	movs	r1, #44	; 0x2c
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	335c      	adds	r3, #92	; 0x5c
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	202c      	movs	r0, #44	; 0x2c
 80016fe:	fb00 f303 	mul.w	r3, r0, r3
 8001702:	440b      	add	r3, r1
 8001704:	335c      	adds	r3, #92	; 0x5c
 8001706:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	212c      	movs	r1, #44	; 0x2c
 800170e:	fb01 f303 	mul.w	r3, r1, r3
 8001712:	4413      	add	r3, r2
 8001714:	3360      	adds	r3, #96	; 0x60
 8001716:	2204      	movs	r2, #4
 8001718:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	015a      	lsls	r2, r3, #5
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4413      	add	r3, r2
 8001722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001726:	461a      	mov	r2, r3
 8001728:	2302      	movs	r3, #2
 800172a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	b2d8      	uxtb	r0, r3
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	212c      	movs	r1, #44	; 0x2c
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	3360      	adds	r3, #96	; 0x60
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4601      	mov	r1, r0
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f001 fcee 	bl	8003126 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800174a:	e061      	b.n	8001810 <HCD_HC_IN_IRQHandler+0x6a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	015a      	lsls	r2, r3, #5
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4413      	add	r3, r2
 8001754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b10      	cmp	r3, #16
 8001760:	d156      	bne.n	8001810 <HCD_HC_IN_IRQHandler+0x6a6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	212c      	movs	r1, #44	; 0x2c
 8001768:	fb01 f303 	mul.w	r3, r1, r3
 800176c:	4413      	add	r3, r2
 800176e:	333f      	adds	r3, #63	; 0x3f
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d111      	bne.n	800179a <HCD_HC_IN_IRQHandler+0x630>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	212c      	movs	r1, #44	; 0x2c
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	335c      	adds	r3, #92	; 0x5c
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fa70 	bl	8002c78 <USB_HC_Halt>
 8001798:	e031      	b.n	80017fe <HCD_HC_IN_IRQHandler+0x694>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	212c      	movs	r1, #44	; 0x2c
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	333f      	adds	r3, #63	; 0x3f
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <HCD_HC_IN_IRQHandler+0x658>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	333f      	adds	r3, #63	; 0x3f
 80017bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d11d      	bne.n	80017fe <HCD_HC_IN_IRQHandler+0x694>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	212c      	movs	r1, #44	; 0x2c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	335c      	adds	r3, #92	; 0x5c
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d110      	bne.n	80017fe <HCD_HC_IN_IRQHandler+0x694>
        hhcd->hc[ch_num].state = HC_NAK;
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	3361      	adds	r3, #97	; 0x61
 80017ea:	2203      	movs	r2, #3
 80017ec:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 fa3d 	bl	8002c78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	015a      	lsls	r2, r3, #5
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4413      	add	r3, r2
 8001806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180a:	461a      	mov	r2, r3
 800180c:	2310      	movs	r3, #16
 800180e:	6093      	str	r3, [r2, #8]
}
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	4413      	add	r3, r2
 800183a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b04      	cmp	r3, #4
 8001846:	d11a      	bne.n	800187e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	015a      	lsls	r2, r3, #5
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	4413      	add	r3, r2
 8001850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001854:	461a      	mov	r2, r3
 8001856:	2304      	movs	r3, #4
 8001858:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3361      	adds	r3, #97	; 0x61
 8001868:	2206      	movs	r2, #6
 800186a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f001 f9fe 	bl	8002c78 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800187c:	e333      	b.n	8001ee6 <HCD_HC_OUT_IRQHandler+0x6ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	015a      	lsls	r2, r3, #5
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4413      	add	r3, r2
 8001886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0320 	and.w	r3, r3, #32
 8001890:	2b20      	cmp	r3, #32
 8001892:	d12e      	bne.n	80018f2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	4413      	add	r3, r2
 800189c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a0:	461a      	mov	r2, r3
 80018a2:	2320      	movs	r3, #32
 80018a4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	333d      	adds	r3, #61	; 0x3d
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	f040 8315 	bne.w	8001ee6 <HCD_HC_OUT_IRQHandler+0x6ce>
      hhcd->hc[ch_num].do_ping = 0U;
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	212c      	movs	r1, #44	; 0x2c
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	333d      	adds	r3, #61	; 0x3d
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	212c      	movs	r1, #44	; 0x2c
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	3360      	adds	r3, #96	; 0x60
 80018dc:	2202      	movs	r2, #2
 80018de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 f9c4 	bl	8002c78 <USB_HC_Halt>
}
 80018f0:	e2f9      	b.n	8001ee6 <HCD_HC_OUT_IRQHandler+0x6ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	015a      	lsls	r2, r3, #5
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001908:	d112      	bne.n	8001930 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	015a      	lsls	r2, r3, #5
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4413      	add	r3, r2
 8001912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001916:	461a      	mov	r2, r3
 8001918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800191c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f001 f9a5 	bl	8002c78 <USB_HC_Halt>
}
 800192e:	e2da      	b.n	8001ee6 <HCD_HC_OUT_IRQHandler+0x6ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	015a      	lsls	r2, r3, #5
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	4413      	add	r3, r2
 8001938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b01      	cmp	r3, #1
 8001944:	d140      	bne.n	80019c8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	212c      	movs	r1, #44	; 0x2c
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	4413      	add	r3, r2
 8001952:	335c      	adds	r3, #92	; 0x5c
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	4413      	add	r3, r2
 8001960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800196a:	2b40      	cmp	r3, #64	; 0x40
 800196c:	d111      	bne.n	8001992 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	212c      	movs	r1, #44	; 0x2c
 8001974:	fb01 f303 	mul.w	r3, r1, r3
 8001978:	4413      	add	r3, r2
 800197a:	333d      	adds	r3, #61	; 0x3d
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	4413      	add	r3, r2
 8001988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800198c:	461a      	mov	r2, r3
 800198e:	2340      	movs	r3, #64	; 0x40
 8001990:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	015a      	lsls	r2, r3, #5
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4413      	add	r3, r2
 800199a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199e:	461a      	mov	r2, r3
 80019a0:	2301      	movs	r3, #1
 80019a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	212c      	movs	r1, #44	; 0x2c
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	3361      	adds	r3, #97	; 0x61
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 f959 	bl	8002c78 <USB_HC_Halt>
}
 80019c6:	e28e      	b.n	8001ee6 <HCD_HC_OUT_IRQHandler+0x6ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019da:	2b40      	cmp	r3, #64	; 0x40
 80019dc:	d12c      	bne.n	8001a38 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3361      	adds	r3, #97	; 0x61
 80019ec:	2204      	movs	r2, #4
 80019ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	212c      	movs	r1, #44	; 0x2c
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	333d      	adds	r3, #61	; 0x3d
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	335c      	adds	r3, #92	; 0x5c
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 f92a 	bl	8002c78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	015a      	lsls	r2, r3, #5
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a30:	461a      	mov	r2, r3
 8001a32:	2340      	movs	r3, #64	; 0x40
 8001a34:	6093      	str	r3, [r2, #8]
}
 8001a36:	e256      	b.n	8001ee6 <HCD_HC_OUT_IRQHandler+0x6ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	015a      	lsls	r2, r3, #5
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d11a      	bne.n	8001a84 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	212c      	movs	r1, #44	; 0x2c
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3361      	adds	r3, #97	; 0x61
 8001a6e:	2205      	movs	r2, #5
 8001a70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 f8fb 	bl	8002c78 <USB_HC_Halt>
}
 8001a82:	e230      	b.n	8001ee6 <HCD_HC_OUT_IRQHandler+0x6ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	015a      	lsls	r2, r3, #5
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b10      	cmp	r3, #16
 8001a98:	d140      	bne.n	8001b1c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	212c      	movs	r1, #44	; 0x2c
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	335c      	adds	r3, #92	; 0x5c
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	212c      	movs	r1, #44	; 0x2c
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3361      	adds	r3, #97	; 0x61
 8001aba:	2203      	movs	r2, #3
 8001abc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	212c      	movs	r1, #44	; 0x2c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	333d      	adds	r3, #61	; 0x3d
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d112      	bne.n	8001af8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	333c      	adds	r3, #60	; 0x3c
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d108      	bne.n	8001af8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	212c      	movs	r1, #44	; 0x2c
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	333d      	adds	r3, #61	; 0x3d
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 f8b8 	bl	8002c78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	015a      	lsls	r2, r3, #5
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b14:	461a      	mov	r2, r3
 8001b16:	2310      	movs	r3, #16
 8001b18:	6093      	str	r3, [r2, #8]
}
 8001b1a:	e1e4      	b.n	8001ee6 <HCD_HC_OUT_IRQHandler+0x6ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2e:	2b80      	cmp	r3, #128	; 0x80
 8001b30:	d165      	bne.n	8001bfe <HCD_HC_OUT_IRQHandler+0x3e6>
    if (hhcd->Init.dma_enable == 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d111      	bne.n	8001b5e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	212c      	movs	r1, #44	; 0x2c
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	3361      	adds	r3, #97	; 0x61
 8001b48:	2206      	movs	r2, #6
 8001b4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 f88e 	bl	8002c78 <USB_HC_Halt>
 8001b5c:	e045      	b.n	8001bea <HCD_HC_OUT_IRQHandler+0x3d2>
      hhcd->hc[ch_num].ErrCnt++;
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	212c      	movs	r1, #44	; 0x2c
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	335c      	adds	r3, #92	; 0x5c
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	202c      	movs	r0, #44	; 0x2c
 8001b76:	fb00 f303 	mul.w	r3, r0, r3
 8001b7a:	440b      	add	r3, r1
 8001b7c:	335c      	adds	r3, #92	; 0x5c
 8001b7e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	212c      	movs	r1, #44	; 0x2c
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	335c      	adds	r3, #92	; 0x5c
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d921      	bls.n	8001bd8 <HCD_HC_OUT_IRQHandler+0x3c0>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	212c      	movs	r1, #44	; 0x2c
 8001b9a:	fb01 f303 	mul.w	r3, r1, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	335c      	adds	r3, #92	; 0x5c
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3360      	adds	r3, #96	; 0x60
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	b2d8      	uxtb	r0, r3
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	212c      	movs	r1, #44	; 0x2c
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3360      	adds	r3, #96	; 0x60
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4601      	mov	r1, r0
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f001 faa8 	bl	8003126 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001bd6:	e008      	b.n	8001bea <HCD_HC_OUT_IRQHandler+0x3d2>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	212c      	movs	r1, #44	; 0x2c
 8001bde:	fb01 f303 	mul.w	r3, r1, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	3360      	adds	r3, #96	; 0x60
 8001be6:	2202      	movs	r2, #2
 8001be8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	6093      	str	r3, [r2, #8]
}
 8001bfc:	e173      	b.n	8001ee6 <HCD_HC_OUT_IRQHandler+0x6ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c14:	d11b      	bne.n	8001c4e <HCD_HC_OUT_IRQHandler+0x436>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3361      	adds	r3, #97	; 0x61
 8001c24:	2208      	movs	r2, #8
 8001c26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f001 f820 	bl	8002c78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c44:	461a      	mov	r2, r3
 8001c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c4a:	6093      	str	r3, [r2, #8]
}
 8001c4c:	e14b      	b.n	8001ee6 <HCD_HC_OUT_IRQHandler+0x6ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	f040 8140 	bne.w	8001ee6 <HCD_HC_OUT_IRQHandler+0x6ce>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	212c      	movs	r1, #44	; 0x2c
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	3361      	adds	r3, #97	; 0x61
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d17d      	bne.n	8001d76 <HCD_HC_OUT_IRQHandler+0x55e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	212c      	movs	r1, #44	; 0x2c
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	3360      	adds	r3, #96	; 0x60
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	212c      	movs	r1, #44	; 0x2c
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	333f      	adds	r3, #63	; 0x3f
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d00a      	beq.n	8001cb6 <HCD_HC_OUT_IRQHandler+0x49e>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	333f      	adds	r3, #63	; 0x3f
 8001cae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	f040 8100 	bne.w	8001eb6 <HCD_HC_OUT_IRQHandler+0x69e>
        if (hhcd->Init.dma_enable == 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d113      	bne.n	8001ce6 <HCD_HC_OUT_IRQHandler+0x4ce>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	212c      	movs	r1, #44	; 0x2c
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3355      	adds	r3, #85	; 0x55
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	f083 0301 	eor.w	r3, r3, #1
 8001cd2:	b2d8      	uxtb	r0, r3
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	212c      	movs	r1, #44	; 0x2c
 8001cda:	fb01 f303 	mul.w	r3, r1, r3
 8001cde:	4413      	add	r3, r2
 8001ce0:	3355      	adds	r3, #85	; 0x55
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	f040 80e3 	bne.w	8001eb6 <HCD_HC_OUT_IRQHandler+0x69e>
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	212c      	movs	r1, #44	; 0x2c
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	334c      	adds	r3, #76	; 0x4c
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80d8 	beq.w	8001eb6 <HCD_HC_OUT_IRQHandler+0x69e>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	212c      	movs	r1, #44	; 0x2c
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	334c      	adds	r3, #76	; 0x4c
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	202c      	movs	r0, #44	; 0x2c
 8001d1c:	fb00 f202 	mul.w	r2, r0, r2
 8001d20:	440a      	add	r2, r1
 8001d22:	3240      	adds	r2, #64	; 0x40
 8001d24:	8812      	ldrh	r2, [r2, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	202c      	movs	r0, #44	; 0x2c
 8001d30:	fb00 f202 	mul.w	r2, r0, r2
 8001d34:	440a      	add	r2, r1
 8001d36:	3240      	adds	r2, #64	; 0x40
 8001d38:	8812      	ldrh	r2, [r2, #0]
 8001d3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 80b5 	beq.w	8001eb6 <HCD_HC_OUT_IRQHandler+0x69e>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	3355      	adds	r3, #85	; 0x55
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	f083 0301 	eor.w	r3, r3, #1
 8001d60:	b2d8      	uxtb	r0, r3
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	212c      	movs	r1, #44	; 0x2c
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3355      	adds	r3, #85	; 0x55
 8001d70:	4602      	mov	r2, r0
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e09f      	b.n	8001eb6 <HCD_HC_OUT_IRQHandler+0x69e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	212c      	movs	r1, #44	; 0x2c
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	3361      	adds	r3, #97	; 0x61
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d109      	bne.n	8001d9e <HCD_HC_OUT_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	212c      	movs	r1, #44	; 0x2c
 8001d90:	fb01 f303 	mul.w	r3, r1, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	3360      	adds	r3, #96	; 0x60
 8001d98:	2202      	movs	r2, #2
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	e08b      	b.n	8001eb6 <HCD_HC_OUT_IRQHandler+0x69e>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	212c      	movs	r1, #44	; 0x2c
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	3361      	adds	r3, #97	; 0x61
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d109      	bne.n	8001dc6 <HCD_HC_OUT_IRQHandler+0x5ae>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3360      	adds	r3, #96	; 0x60
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	e077      	b.n	8001eb6 <HCD_HC_OUT_IRQHandler+0x69e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3361      	adds	r3, #97	; 0x61
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d109      	bne.n	8001dee <HCD_HC_OUT_IRQHandler+0x5d6>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	212c      	movs	r1, #44	; 0x2c
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	3360      	adds	r3, #96	; 0x60
 8001de8:	2205      	movs	r2, #5
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e063      	b.n	8001eb6 <HCD_HC_OUT_IRQHandler+0x69e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	212c      	movs	r1, #44	; 0x2c
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	3361      	adds	r3, #97	; 0x61
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d009      	beq.n	8001e16 <HCD_HC_OUT_IRQHandler+0x5fe>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	212c      	movs	r1, #44	; 0x2c
 8001e08:	fb01 f303 	mul.w	r3, r1, r3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3361      	adds	r3, #97	; 0x61
 8001e10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d14f      	bne.n	8001eb6 <HCD_HC_OUT_IRQHandler+0x69e>
      hhcd->hc[ch_num].ErrCnt++;
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	212c      	movs	r1, #44	; 0x2c
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	335c      	adds	r3, #92	; 0x5c
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	202c      	movs	r0, #44	; 0x2c
 8001e2e:	fb00 f303 	mul.w	r3, r0, r3
 8001e32:	440b      	add	r3, r1
 8001e34:	335c      	adds	r3, #92	; 0x5c
 8001e36:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	212c      	movs	r1, #44	; 0x2c
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	335c      	adds	r3, #92	; 0x5c
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d912      	bls.n	8001e72 <HCD_HC_OUT_IRQHandler+0x65a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	335c      	adds	r3, #92	; 0x5c
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3360      	adds	r3, #96	; 0x60
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	701a      	strb	r2, [r3, #0]
 8001e70:	e021      	b.n	8001eb6 <HCD_HC_OUT_IRQHandler+0x69e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	212c      	movs	r1, #44	; 0x2c
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3360      	adds	r3, #96	; 0x60
 8001e80:	2202      	movs	r2, #2
 8001e82:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e9a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ea2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	b2d8      	uxtb	r0, r3
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	212c      	movs	r1, #44	; 0x2c
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3360      	adds	r3, #96	; 0x60
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4601      	mov	r1, r0
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f001 f920 	bl	8003126 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001ee6:	bf00      	nop
 8001ee8:	3720      	adds	r7, #32
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b08a      	sub	sp, #40	; 0x28
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	0c5b      	lsrs	r3, r3, #17
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f22:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d003      	beq.n	8001f32 <HCD_RXQLVL_IRQHandler+0x44>
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	f000 80a9 	beq.w	8002082 <HCD_RXQLVL_IRQHandler+0x194>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001f30:	e0aa      	b.n	8002088 <HCD_RXQLVL_IRQHandler+0x19a>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80a6 	beq.w	8002086 <HCD_RXQLVL_IRQHandler+0x198>
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	212c      	movs	r1, #44	; 0x2c
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	3344      	adds	r3, #68	; 0x44
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 809b 	beq.w	8002086 <HCD_RXQLVL_IRQHandler+0x198>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	212c      	movs	r1, #44	; 0x2c
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3350      	adds	r3, #80	; 0x50
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	441a      	add	r2, r3
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	202c      	movs	r0, #44	; 0x2c
 8001f6a:	fb00 f303 	mul.w	r3, r0, r3
 8001f6e:	440b      	add	r3, r1
 8001f70:	334c      	adds	r3, #76	; 0x4c
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d87a      	bhi.n	800206e <HCD_RXQLVL_IRQHandler+0x180>
          (void)USB_ReadPacket(hhcd->Instance,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	212c      	movs	r1, #44	; 0x2c
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	3344      	adds	r3, #68	; 0x44
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f000 fdad 	bl	8002af0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	212c      	movs	r1, #44	; 0x2c
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3344      	adds	r3, #68	; 0x44
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	441a      	add	r2, r3
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	202c      	movs	r0, #44	; 0x2c
 8001fb0:	fb00 f303 	mul.w	r3, r0, r3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3344      	adds	r3, #68	; 0x44
 8001fb8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	212c      	movs	r1, #44	; 0x2c
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3350      	adds	r3, #80	; 0x50
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	441a      	add	r2, r3
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	202c      	movs	r0, #44	; 0x2c
 8001fd4:	fb00 f303 	mul.w	r3, r0, r3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3350      	adds	r3, #80	; 0x50
 8001fdc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	0cdb      	lsrs	r3, r3, #19
 8001fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	3340      	adds	r3, #64	; 0x40
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4293      	cmp	r3, r2
 800200a:	d13c      	bne.n	8002086 <HCD_RXQLVL_IRQHandler+0x198>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d039      	beq.n	8002086 <HCD_RXQLVL_IRQHandler+0x198>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	4413      	add	r3, r2
 800201a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002028:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002030:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	4413      	add	r3, r2
 800203a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203e:	461a      	mov	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3354      	adds	r3, #84	; 0x54
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	f083 0301 	eor.w	r3, r3, #1
 8002058:	b2d8      	uxtb	r0, r3
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	3354      	adds	r3, #84	; 0x54
 8002068:	4602      	mov	r2, r0
 800206a:	701a      	strb	r2, [r3, #0]
      break;
 800206c:	e00b      	b.n	8002086 <HCD_RXQLVL_IRQHandler+0x198>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	3360      	adds	r3, #96	; 0x60
 800207c:	2204      	movs	r2, #4
 800207e:	701a      	strb	r2, [r3, #0]
      break;
 8002080:	e001      	b.n	8002086 <HCD_RXQLVL_IRQHandler+0x198>
      break;
 8002082:	bf00      	nop
 8002084:	e000      	b.n	8002088 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002086:	bf00      	nop
  }
}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80020bc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d10b      	bne.n	80020e0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d102      	bne.n	80020d8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f001 f80b 	bl	80030ee <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d132      	bne.n	8002150 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d126      	bne.n	800214a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d113      	bne.n	800212c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800210a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800210e:	d106      	bne.n	800211e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2102      	movs	r1, #2
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fd63 	bl	8002be2 <USB_InitFSLSPClkSel>
 800211c:	e011      	b.n	8002142 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2101      	movs	r1, #1
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fd5c 	bl	8002be2 <USB_InitFSLSPClkSel>
 800212a:	e00a      	b.n	8002142 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d106      	bne.n	8002142 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800213a:	461a      	mov	r2, r3
 800213c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002140:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fffd 	bl	8003142 <HAL_HCD_PortEnabled_Callback>
 8002148:	e002      	b.n	8002150 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f001 f807 	bl	800315e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b20      	cmp	r3, #32
 8002158:	d103      	bne.n	8002162 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f043 0320 	orr.w	r3, r3, #32
 8002160:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	6013      	str	r3, [r2, #0]
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e264      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d075      	beq.n	8002282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002196:	4ba3      	ldr	r3, [pc, #652]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d00c      	beq.n	80021bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a2:	4ba0      	ldr	r3, [pc, #640]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d112      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ae:	4b9d      	ldr	r3, [pc, #628]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ba:	d10b      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	4b99      	ldr	r3, [pc, #612]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d05b      	beq.n	8002280 <HAL_RCC_OscConfig+0x108>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d157      	bne.n	8002280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e23f      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_OscConfig+0x74>
 80021de:	4b91      	ldr	r3, [pc, #580]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a90      	ldr	r2, [pc, #576]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e01d      	b.n	8002228 <HAL_RCC_OscConfig+0xb0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x98>
 80021f6:	4b8b      	ldr	r3, [pc, #556]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a8a      	ldr	r2, [pc, #552]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b88      	ldr	r3, [pc, #544]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a87      	ldr	r2, [pc, #540]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0xb0>
 8002210:	4b84      	ldr	r3, [pc, #528]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a83      	ldr	r2, [pc, #524]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 8002216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b81      	ldr	r3, [pc, #516]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a80      	ldr	r2, [pc, #512]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 8002222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d013      	beq.n	8002258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fbaa 	bl	8000988 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002238:	f7fe fba6 	bl	8000988 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e204      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b76      	ldr	r3, [pc, #472]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0xc0>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fb96 	bl	8000988 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002260:	f7fe fb92 	bl	8000988 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1f0      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	4b6c      	ldr	r3, [pc, #432]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0xe8>
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d063      	beq.n	8002356 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800228e:	4b65      	ldr	r3, [pc, #404]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229a:	4b62      	ldr	r3, [pc, #392]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d11c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a6:	4b5f      	ldr	r3, [pc, #380]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d116      	bne.n	80022e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	4b5c      	ldr	r3, [pc, #368]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x152>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e1c4      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ca:	4b56      	ldr	r3, [pc, #344]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4952      	ldr	r1, [pc, #328]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	e03a      	b.n	8002356 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d020      	beq.n	800232a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e8:	4b4f      	ldr	r3, [pc, #316]	; (8002428 <HAL_RCC_OscConfig+0x2b0>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7fe fb4b 	bl	8000988 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f6:	f7fe fb47 	bl	8000988 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e1a5      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	4b46      	ldr	r3, [pc, #280]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4940      	ldr	r1, [pc, #256]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]
 8002328:	e015      	b.n	8002356 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232a:	4b3f      	ldr	r3, [pc, #252]	; (8002428 <HAL_RCC_OscConfig+0x2b0>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7fe fb2a 	bl	8000988 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002338:	f7fe fb26 	bl	8000988 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e184      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	4b36      	ldr	r3, [pc, #216]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d030      	beq.n	80023c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d016      	beq.n	8002398 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236a:	4b30      	ldr	r3, [pc, #192]	; (800242c <HAL_RCC_OscConfig+0x2b4>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7fe fb0a 	bl	8000988 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002378:	f7fe fb06 	bl	8000988 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e164      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x200>
 8002396:	e015      	b.n	80023c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002398:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_RCC_OscConfig+0x2b4>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7fe faf3 	bl	8000988 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a6:	f7fe faef 	bl	8000988 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e14d      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80023ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a0 	beq.w	8002512 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10f      	bne.n	8002402 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fe:	2301      	movs	r3, #1
 8002400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_OscConfig+0x2b8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d121      	bne.n	8002452 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_RCC_OscConfig+0x2b8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <HAL_RCC_OscConfig+0x2b8>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241a:	f7fe fab5 	bl	8000988 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	e011      	b.n	8002446 <HAL_RCC_OscConfig+0x2ce>
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	42470000 	.word	0x42470000
 800242c:	42470e80 	.word	0x42470e80
 8002430:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002434:	f7fe faa8 	bl	8000988 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e106      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002446:	4b85      	ldr	r3, [pc, #532]	; (800265c <HAL_RCC_OscConfig+0x4e4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d106      	bne.n	8002468 <HAL_RCC_OscConfig+0x2f0>
 800245a:	4b81      	ldr	r3, [pc, #516]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245e:	4a80      	ldr	r2, [pc, #512]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6713      	str	r3, [r2, #112]	; 0x70
 8002466:	e01c      	b.n	80024a2 <HAL_RCC_OscConfig+0x32a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b05      	cmp	r3, #5
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x312>
 8002470:	4b7b      	ldr	r3, [pc, #492]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 8002472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002474:	4a7a      	ldr	r2, [pc, #488]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 8002476:	f043 0304 	orr.w	r3, r3, #4
 800247a:	6713      	str	r3, [r2, #112]	; 0x70
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	4a77      	ldr	r2, [pc, #476]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6713      	str	r3, [r2, #112]	; 0x70
 8002488:	e00b      	b.n	80024a2 <HAL_RCC_OscConfig+0x32a>
 800248a:	4b75      	ldr	r3, [pc, #468]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248e:	4a74      	ldr	r2, [pc, #464]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6713      	str	r3, [r2, #112]	; 0x70
 8002496:	4b72      	ldr	r3, [pc, #456]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	4a71      	ldr	r2, [pc, #452]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d015      	beq.n	80024d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024aa:	f7fe fa6d 	bl	8000988 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7fe fa69 	bl	8000988 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e0c5      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	4b65      	ldr	r3, [pc, #404]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ee      	beq.n	80024b2 <HAL_RCC_OscConfig+0x33a>
 80024d4:	e014      	b.n	8002500 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7fe fa57 	bl	8000988 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7fe fa53 	bl	8000988 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e0af      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f4:	4b5a      	ldr	r3, [pc, #360]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1ee      	bne.n	80024de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d105      	bne.n	8002512 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002506:	4b56      	ldr	r3, [pc, #344]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a55      	ldr	r2, [pc, #340]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 800250c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 809b 	beq.w	8002652 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800251c:	4b50      	ldr	r3, [pc, #320]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d05c      	beq.n	80025e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d141      	bne.n	80025b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002530:	4b4c      	ldr	r3, [pc, #304]	; (8002664 <HAL_RCC_OscConfig+0x4ec>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7fe fa27 	bl	8000988 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe fa23 	bl	8000988 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e081      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002550:	4b43      	ldr	r3, [pc, #268]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69da      	ldr	r2, [r3, #28]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	019b      	lsls	r3, r3, #6
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	085b      	lsrs	r3, r3, #1
 8002574:	3b01      	subs	r3, #1
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	061b      	lsls	r3, r3, #24
 8002580:	4937      	ldr	r1, [pc, #220]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002586:	4b37      	ldr	r3, [pc, #220]	; (8002664 <HAL_RCC_OscConfig+0x4ec>)
 8002588:	2201      	movs	r2, #1
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7fe f9fc 	bl	8000988 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe f9f8 	bl	8000988 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e056      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x41c>
 80025b2:	e04e      	b.n	8002652 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b4:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_RCC_OscConfig+0x4ec>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7fe f9e5 	bl	8000988 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe f9e1 	bl	8000988 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e03f      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d4:	4b22      	ldr	r3, [pc, #136]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x44a>
 80025e0:	e037      	b.n	8002652 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e032      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025ee:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <HAL_RCC_OscConfig+0x4e8>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d028      	beq.n	800264e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002606:	429a      	cmp	r2, r3
 8002608:	d121      	bne.n	800264e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d11a      	bne.n	800264e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800261e:	4013      	ands	r3, r2
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002624:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002626:	4293      	cmp	r3, r2
 8002628:	d111      	bne.n	800264e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	085b      	lsrs	r3, r3, #1
 8002636:	3b01      	subs	r3, #1
 8002638:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d107      	bne.n	800264e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40007000 	.word	0x40007000
 8002660:	40023800 	.word	0x40023800
 8002664:	42470060 	.word	0x42470060

08002668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0cc      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b68      	ldr	r3, [pc, #416]	; (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d90c      	bls.n	80026a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b65      	ldr	r3, [pc, #404]	; (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b63      	ldr	r3, [pc, #396]	; (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0b8      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d020      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026bc:	4b59      	ldr	r3, [pc, #356]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a58      	ldr	r2, [pc, #352]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d4:	4b53      	ldr	r3, [pc, #332]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a52      	ldr	r2, [pc, #328]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e0:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	494d      	ldr	r1, [pc, #308]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d044      	beq.n	8002788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d119      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e07f      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d003      	beq.n	8002726 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002722:	2b03      	cmp	r3, #3
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e06f      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e067      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b37      	ldr	r3, [pc, #220]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4934      	ldr	r1, [pc, #208]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002758:	f7fe f916 	bl	8000988 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7fe f912 	bl	8000988 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e04f      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002788:	4b25      	ldr	r3, [pc, #148]	; (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d20c      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b22      	ldr	r3, [pc, #136]	; (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e032      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4916      	ldr	r1, [pc, #88]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	490e      	ldr	r1, [pc, #56]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ee:	f000 f821 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 80027f2:	4601      	mov	r1, r0
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	5cd3      	ldrb	r3, [r2, r3]
 8002802:	fa21 f303 	lsr.w	r3, r1, r3
 8002806:	4a09      	ldr	r2, [pc, #36]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe f876 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00
 8002824:	40023800 	.word	0x40023800
 8002828:	08003278 	.word	0x08003278
 800282c:	20000000 	.word	0x20000000
 8002830:	20000004 	.word	0x20000004

08002834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	2300      	movs	r3, #0
 8002844:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800284a:	4b63      	ldr	r3, [pc, #396]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b04      	cmp	r3, #4
 8002854:	d007      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x32>
 8002856:	2b08      	cmp	r3, #8
 8002858:	d008      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x38>
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 80b4 	bne.w	80029c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002860:	4b5e      	ldr	r3, [pc, #376]	; (80029dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002862:	60bb      	str	r3, [r7, #8]
       break;
 8002864:	e0b3      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002866:	4b5e      	ldr	r3, [pc, #376]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002868:	60bb      	str	r3, [r7, #8]
      break;
 800286a:	e0b0      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800286c:	4b5a      	ldr	r3, [pc, #360]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002874:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002876:	4b58      	ldr	r3, [pc, #352]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d04a      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002882:	4b55      	ldr	r3, [pc, #340]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	099b      	lsrs	r3, r3, #6
 8002888:	f04f 0400 	mov.w	r4, #0
 800288c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	ea03 0501 	and.w	r5, r3, r1
 8002898:	ea04 0602 	and.w	r6, r4, r2
 800289c:	4629      	mov	r1, r5
 800289e:	4632      	mov	r2, r6
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	f04f 0400 	mov.w	r4, #0
 80028a8:	0154      	lsls	r4, r2, #5
 80028aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028ae:	014b      	lsls	r3, r1, #5
 80028b0:	4619      	mov	r1, r3
 80028b2:	4622      	mov	r2, r4
 80028b4:	1b49      	subs	r1, r1, r5
 80028b6:	eb62 0206 	sbc.w	r2, r2, r6
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	f04f 0400 	mov.w	r4, #0
 80028c2:	0194      	lsls	r4, r2, #6
 80028c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028c8:	018b      	lsls	r3, r1, #6
 80028ca:	1a5b      	subs	r3, r3, r1
 80028cc:	eb64 0402 	sbc.w	r4, r4, r2
 80028d0:	f04f 0100 	mov.w	r1, #0
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	00e2      	lsls	r2, r4, #3
 80028da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028de:	00d9      	lsls	r1, r3, #3
 80028e0:	460b      	mov	r3, r1
 80028e2:	4614      	mov	r4, r2
 80028e4:	195b      	adds	r3, r3, r5
 80028e6:	eb44 0406 	adc.w	r4, r4, r6
 80028ea:	f04f 0100 	mov.w	r1, #0
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	0262      	lsls	r2, r4, #9
 80028f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028f8:	0259      	lsls	r1, r3, #9
 80028fa:	460b      	mov	r3, r1
 80028fc:	4614      	mov	r4, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	4621      	mov	r1, r4
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f04f 0400 	mov.w	r4, #0
 8002908:	461a      	mov	r2, r3
 800290a:	4623      	mov	r3, r4
 800290c:	f7fd fc64 	bl	80001d8 <__aeabi_uldivmod>
 8002910:	4603      	mov	r3, r0
 8002912:	460c      	mov	r4, r1
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e049      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002918:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	f04f 0400 	mov.w	r4, #0
 8002922:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	ea03 0501 	and.w	r5, r3, r1
 800292e:	ea04 0602 	and.w	r6, r4, r2
 8002932:	4629      	mov	r1, r5
 8002934:	4632      	mov	r2, r6
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	f04f 0400 	mov.w	r4, #0
 800293e:	0154      	lsls	r4, r2, #5
 8002940:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002944:	014b      	lsls	r3, r1, #5
 8002946:	4619      	mov	r1, r3
 8002948:	4622      	mov	r2, r4
 800294a:	1b49      	subs	r1, r1, r5
 800294c:	eb62 0206 	sbc.w	r2, r2, r6
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	f04f 0400 	mov.w	r4, #0
 8002958:	0194      	lsls	r4, r2, #6
 800295a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800295e:	018b      	lsls	r3, r1, #6
 8002960:	1a5b      	subs	r3, r3, r1
 8002962:	eb64 0402 	sbc.w	r4, r4, r2
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	00e2      	lsls	r2, r4, #3
 8002970:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002974:	00d9      	lsls	r1, r3, #3
 8002976:	460b      	mov	r3, r1
 8002978:	4614      	mov	r4, r2
 800297a:	195b      	adds	r3, r3, r5
 800297c:	eb44 0406 	adc.w	r4, r4, r6
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	02a2      	lsls	r2, r4, #10
 800298a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800298e:	0299      	lsls	r1, r3, #10
 8002990:	460b      	mov	r3, r1
 8002992:	4614      	mov	r4, r2
 8002994:	4618      	mov	r0, r3
 8002996:	4621      	mov	r1, r4
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f04f 0400 	mov.w	r4, #0
 800299e:	461a      	mov	r2, r3
 80029a0:	4623      	mov	r3, r4
 80029a2:	f7fd fc19 	bl	80001d8 <__aeabi_uldivmod>
 80029a6:	4603      	mov	r3, r0
 80029a8:	460c      	mov	r4, r1
 80029aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	3301      	adds	r3, #1
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	60bb      	str	r3, [r7, #8]
      break;
 80029c6:	e002      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029ca:	60bb      	str	r3, [r7, #8]
      break;
 80029cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ce:	68bb      	ldr	r3, [r7, #8]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	00f42400 	.word	0x00f42400
 80029e0:	007a1200 	.word	0x007a1200

080029e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f043 0201 	orr.w	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f023 0201 	bic.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <USB_FlushTxFifo+0x64>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e01b      	b.n	8002a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	daf2      	bge.n	8002a36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	019b      	lsls	r3, r3, #6
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3301      	adds	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <USB_FlushTxFifo+0x64>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e006      	b.n	8002a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d0f0      	beq.n	8002a60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	00030d40 	.word	0x00030d40

08002a90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a11      	ldr	r2, [pc, #68]	; (8002aec <USB_FlushRxFifo+0x5c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e018      	b.n	8002ae0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	daf2      	bge.n	8002a9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2210      	movs	r2, #16
 8002abe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4a08      	ldr	r2, [pc, #32]	; (8002aec <USB_FlushRxFifo+0x5c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e006      	b.n	8002ae0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b10      	cmp	r3, #16
 8002adc:	d0f0      	beq.n	8002ac0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	00030d40 	.word	0x00030d40

08002af0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b08b      	sub	sp, #44	; 0x2c
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	4613      	mov	r3, r2
 8002afc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	089b      	lsrs	r3, r3, #2
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
 8002b1a:	e014      	b.n	8002b46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	601a      	str	r2, [r3, #0]
    pDest++;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	3301      	adds	r3, #1
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	3301      	adds	r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	3301      	adds	r3, #1
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	6a3a      	ldr	r2, [r7, #32]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d3e6      	bcc.n	8002b1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8002b4e:	8bfb      	ldrh	r3, [r7, #30]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01e      	beq.n	8002b92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	701a      	strb	r2, [r3, #0]
      i++;
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	3301      	adds	r3, #1
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8002b86:	8bfb      	ldrh	r3, [r7, #30]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8002b8c:	8bfb      	ldrh	r3, [r7, #30]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ea      	bne.n	8002b68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	372c      	adds	r7, #44	; 0x2c
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c00:	f023 0303 	bic.w	r3, r3, #3
 8002c04:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d107      	bne.n	8002c34 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002c30:	6053      	str	r3, [r2, #4]
 8002c32:	e009      	b.n	8002c48 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d106      	bne.n	8002c48 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c40:	461a      	mov	r2, r3
 8002c42:	f241 7370 	movw	r3, #6000	; 0x1770
 8002c46:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	b29b      	uxth	r3, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	; 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0c9b      	lsrs	r3, r3, #18
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0fdb      	lsrs	r3, r3, #31
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d104      	bne.n	8002cd2 <USB_HC_Halt+0x5a>
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e0c8      	b.n	8002e64 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <USB_HC_Halt+0x66>
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d163      	bne.n	8002da6 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	0151      	lsls	r1, r2, #5
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	440a      	add	r2, r1
 8002cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cfc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 80ab 	bne.w	8002e62 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d133      	bne.n	8002d80 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	0151      	lsls	r1, r2, #5
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	440a      	add	r2, r1
 8002d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d36:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	0151      	lsls	r1, r2, #5
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	440a      	add	r2, r1
 8002d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d56:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d64:	d81d      	bhi.n	8002da2 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d7c:	d0ec      	beq.n	8002d58 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002d7e:	e070      	b.n	8002e62 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	0151      	lsls	r1, r2, #5
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	440a      	add	r2, r1
 8002d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d9e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002da0:	e05f      	b.n	8002e62 <USB_HC_Halt+0x1ea>
            break;
 8002da2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002da4:	e05d      	b.n	8002e62 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	0151      	lsls	r1, r2, #5
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	440a      	add	r2, r1
 8002dbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dc4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d133      	bne.n	8002e3e <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	0151      	lsls	r1, r2, #5
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	440a      	add	r2, r1
 8002dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002df0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002df4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	0151      	lsls	r1, r2, #5
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	440a      	add	r2, r1
 8002e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e14:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e22:	d81d      	bhi.n	8002e60 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e3a:	d0ec      	beq.n	8002e16 <USB_HC_Halt+0x19e>
 8002e3c:	e011      	b.n	8002e62 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	0151      	lsls	r1, r2, #5
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	440a      	add	r2, r1
 8002e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e000      	b.n	8002e62 <USB_HC_Halt+0x1ea>
          break;
 8002e60:	bf00      	nop
    }
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3724      	adds	r7, #36	; 0x24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff fdbe 	bl	8002a06 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff fdcb 	bl	8002a28 <USB_FlushTxFifo>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff fdf7 	bl	8002a90 <USB_FlushRxFifo>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002eac:	2300      	movs	r3, #0
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	e01f      	b.n	8002ef2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ec8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ed0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ed8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b0f      	cmp	r3, #15
 8002ef6:	d9dc      	bls.n	8002eb2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	e034      	b.n	8002f68 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f24:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	461a      	mov	r2, r3
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f44:	d80c      	bhi.n	8002f60 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f5c:	d0ec      	beq.n	8002f38 <USB_StopHost+0xc8>
 8002f5e:	e000      	b.n	8002f62 <USB_StopHost+0xf2>
        break;
 8002f60:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	3301      	adds	r3, #1
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	d9c7      	bls.n	8002efe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f74:	461a      	mov	r2, r3
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f82:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff fd2d 	bl	80029e4 <USB_EnableGlobalInt>

  return ret;
 8002f8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f804 	bl	8002fb8 <USBH_HandleSof>
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b0b      	cmp	r3, #11
 8002fc8:	d10a      	bne.n	8002fe0 <USBH_HandleSof+0x28>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	4798      	blx	r3
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8002ff8:	bf00      	nop
}
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8003014:	bf00      	nop
}
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f883 	bl	800317a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	791b      	ldrb	r3, [r3, #4]
 8003078:	4619      	mov	r1, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f80b 	bl	8003096 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	795b      	ldrb	r3, [r3, #5]
 8003084:	4619      	mov	r1, r3
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f805 	bl	8003096 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	2b0f      	cmp	r3, #15
 80030a6:	d80d      	bhi.n	80030c4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	33e0      	adds	r3, #224	; 0xe0
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	33e0      	adds	r3, #224	; 0xe0
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff57 	bl	8002f94 <USBH_LL_IncTimer>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff8f 	bl	8003020 <USBH_LL_Connect>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff98 	bl	800304e <USBH_LL_Disconnect>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	70fb      	strb	r3, [r7, #3]
 8003132:	4613      	mov	r3, r2
 8003134:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ff49 	bl	8002fe8 <USBH_LL_PortEnabled>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff49 	bl	8003004 <USBH_LL_PortDisabled>
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd ffcd 	bl	8001130 <HAL_HCD_Stop>
 8003196:	4603      	mov	r3, r0
 8003198:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	4618      	mov	r0, r3
 800319e:	f000 f807 	bl	80031b0 <USBH_Get_USB_Status>
 80031a2:	4603      	mov	r3, r0
 80031a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80031a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d817      	bhi.n	80031f4 <USBH_Get_USB_Status+0x44>
 80031c4:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <USBH_Get_USB_Status+0x1c>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	080031dd 	.word	0x080031dd
 80031d0:	080031e3 	.word	0x080031e3
 80031d4:	080031e9 	.word	0x080031e9
 80031d8:	080031ef 	.word	0x080031ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]
    break;
 80031e0:	e00b      	b.n	80031fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80031e2:	2302      	movs	r3, #2
 80031e4:	73fb      	strb	r3, [r7, #15]
    break;
 80031e6:	e008      	b.n	80031fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
    break;
 80031ec:	e005      	b.n	80031fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80031ee:	2302      	movs	r3, #2
 80031f0:	73fb      	strb	r3, [r7, #15]
    break;
 80031f2:	e002      	b.n	80031fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80031f4:	2302      	movs	r3, #2
 80031f6:	73fb      	strb	r3, [r7, #15]
    break;
 80031f8:	bf00      	nop
  }
  return usb_status;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <__libc_init_array>:
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	4e0d      	ldr	r6, [pc, #52]	; (8003240 <__libc_init_array+0x38>)
 800320c:	4c0d      	ldr	r4, [pc, #52]	; (8003244 <__libc_init_array+0x3c>)
 800320e:	1ba4      	subs	r4, r4, r6
 8003210:	10a4      	asrs	r4, r4, #2
 8003212:	2500      	movs	r5, #0
 8003214:	42a5      	cmp	r5, r4
 8003216:	d109      	bne.n	800322c <__libc_init_array+0x24>
 8003218:	4e0b      	ldr	r6, [pc, #44]	; (8003248 <__libc_init_array+0x40>)
 800321a:	4c0c      	ldr	r4, [pc, #48]	; (800324c <__libc_init_array+0x44>)
 800321c:	f000 f820 	bl	8003260 <_init>
 8003220:	1ba4      	subs	r4, r4, r6
 8003222:	10a4      	asrs	r4, r4, #2
 8003224:	2500      	movs	r5, #0
 8003226:	42a5      	cmp	r5, r4
 8003228:	d105      	bne.n	8003236 <__libc_init_array+0x2e>
 800322a:	bd70      	pop	{r4, r5, r6, pc}
 800322c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003230:	4798      	blx	r3
 8003232:	3501      	adds	r5, #1
 8003234:	e7ee      	b.n	8003214 <__libc_init_array+0xc>
 8003236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800323a:	4798      	blx	r3
 800323c:	3501      	adds	r5, #1
 800323e:	e7f2      	b.n	8003226 <__libc_init_array+0x1e>
 8003240:	08003290 	.word	0x08003290
 8003244:	08003290 	.word	0x08003290
 8003248:	08003290 	.word	0x08003290
 800324c:	08003294 	.word	0x08003294

08003250 <memset>:
 8003250:	4402      	add	r2, r0
 8003252:	4603      	mov	r3, r0
 8003254:	4293      	cmp	r3, r2
 8003256:	d100      	bne.n	800325a <memset+0xa>
 8003258:	4770      	bx	lr
 800325a:	f803 1b01 	strb.w	r1, [r3], #1
 800325e:	e7f9      	b.n	8003254 <memset+0x4>

08003260 <_init>:
 8003260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003262:	bf00      	nop
 8003264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003266:	bc08      	pop	{r3}
 8003268:	469e      	mov	lr, r3
 800326a:	4770      	bx	lr

0800326c <_fini>:
 800326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326e:	bf00      	nop
 8003270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003272:	bc08      	pop	{r3}
 8003274:	469e      	mov	lr, r3
 8003276:	4770      	bx	lr
